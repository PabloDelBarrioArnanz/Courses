
/*
    Una funci√≥n es un bloque de c√≥digo que realiza una tarea espec√≠fica cuando se llama
    Se definen con la palabra function
    Si no tiene un return espec√≠fico siempre devuelven undefined
*/

function saludar() { //Definici√≥n
  console.log('Hola Miguel')
}
saludar() //Invoacci√≥n


//Par√°metros permiten parametrizar el comportamiento de la funci√≥n el orden de los parametros es importante
function cocinarMicroondas(plato, tiempo, potencia) {
  if (plato === 'üê•' && tiempo === 1 && potencia === 5) {
    return 'üçó'
  }

  if (plato === 'ü•ö' && tiempo === 2 && potencia === 3) {
    return 'üç≥'
  }

  return '‚ùå Plato no soportado'
}

function myFunction(a, b) //a y b son par√°metros
myFunction(2, 8) //a y b son argumentos


//Function expression, son funciones anonimas

const suma = function(a, b) {
    return a + b
}

//IMPORTANTE
//Hoisting se puede usar la funcion antes de ser definida, porque en compilaci√≥n la pone el compilardor arriba del todo
//Las funciones expresion no est√°n afectadas por el hoisting por lo tanto esto no funciona

suma(1, 2)
const suma = function(a, b) {
    return a + b
}

//Si fuese una funcion normal funcionar√≠a

//ArrowFunctions
//Las funciones flecha son siempre funciones an√≥nimas y function expressions. Esto significa que no tienen nombre y que se asignan a una variable.
const saludar = nombre => {
  console.log("Hola " + nombre)
}
 /*
    Ventajas
    Sintaxis m√°s concisa
    Return implicito (si no abrimos llavess {})
    Mas legibles
 */

//Recursividad